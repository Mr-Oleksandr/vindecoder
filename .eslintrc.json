{
    "env": {
        "browser": true,
        "es2021": true,
        "node": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": "latest",
        "sourceType": "module"
    },
    "plugins": ["react", "react-hooks", "@typescript-eslint", "prettier"],
    "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "react/react-in-jsx-scope": "off",
        "spaced-comment": "error",
        "quotes": ["error", "single"],
        "no-duplicate-imports": "error",
        "no-param-reassign": 0,
        "jsx-a11y/anchor-is-valid": "off", // The HTML <a> element, with a valid href attribute, is formally defined as representing a hyperlink.
        "jsx-a11y/click-events-have-key-events": "off", // This rule is enforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress.
        "jsx-a11y/no-autofocus": "off", // This rule is enforce that autoFocus prop is not used on elements.
        "jsx-a11y/no-noninteractive-element-to-interactive-role": "off", // Interactive HTML elements indicate controls in the user interface. Interactive elements include <a href>, <button>, <input>, <select>, <textarea>.
        "jsx-a11y/control-has-associated-label": "off", // This oprion is enforce that a control (an interactive element) has a text label.
        "jsx-a11y/mouse-events-have-key-events": "off", // This otion is enforce onmouseover/onmouseout are accompanied by onfocus/onblur.
        "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx", ".ts", ".tsx"] }], // The set of allowed extensions is configurable. In this rule '.jsx' and '.js' is allowed.
        "no-unused-vars": "warn", // This rule is disallow unused variables.
        "no-confusing-arrow": "off", // This rfule is disallow arrow functions where they could be confused with comparisons.
        "arrow-parens": "off", // This option is require parentheses around arrow function arguments.
        "import/no-extraneous-dependencies": "off", // Forbid the import of external modules that are not declared in the package.json's dependencies, devDependencies, optionalDependencies, peerDependencies, or bundledDependencies.
        "import/extensions": "off", // Some file resolve algorithms allow you to omit the file extension within the import source path.
        "import/no-unresolved": "off", // This option ensures an imported module can be resolved to a module on the local filesystem, as defined by standard Node require.resolve behavior.
        "import/no-webpack-loader-syntax": "off", // This option is forbid Webpack loader syntax in imports.
        "max-len": "off", //This rule enforces a maximum line length to increase code readability and maintainability.
        "no-shadow": "off", //This rule aims to eliminate shadowed variable declarations.
        "no-console": ["warn", { "allow": ["warn", "error"] }], // This rule disallow the use of console; "allow" has an array of strings which are allowed methods of the console object.
        "no-useless-escape": "off", // This rule is allow unnecessary escape characters.
        "linebreak-style": "off", // This rule is enforce consistent linebreak style.
        "react/jsx-props-no-spreading": "off", // This rule is enforces that there is no spreading for any JSX attribute.
        "react/function-component-definition": [
            2,
            {
                "namedComponents": "arrow-function",
                "unnamedComponents": "arrow-function"
            }
        ], // This option enforces a specific function type for function components.
        "import/prefer-default-export": "off",
        "no-empty": 0,
        "no-underscore-dangle": ["error", { "allow": ["_id"] }],
        "camelcase": ["error", { "allow": ["admin_name", "title_contains", "summary_contains"] }]
    },
    "settings": {
        "import/resolver": {
            "typescript": {}
        }
    }
}